true_lit  = { "true" }
false_lit = { "false" }
bool      = { true_lit | false_lit }

digit = _{ '0'..'9' }
int   =  { digit ~ (digit | "_")* }


plus  = { "+" }
minus = { "-" }
exp   = { ^"e" ~ (plus | minus)? ~ int }
float = {
    int ~ "." ~ int? ~ exp? |
    int ~ exp
}

hex = _{ '0'..'9' | 'a'..'f' | 'A'..'F' }

unicode_hex = { hex ~ hex ~ hex ~ hex ~ hex ~ hex | hex+ }
predefined  = { "n" | "r" | "t" | "\\" | "0" | "\"" | "'" }
byte        = { "x" ~ hex ~ hex }
unicode     = { "u" ~ "{" ~ unicode_hex ~ "}" }
escape      = { "\\" ~ (predefined | byte | unicode) }

chr = { "'" ~ (escape | any) ~ "'" }

raw_string = { (!("\\" | "\"") ~ any)+ }
string     = { "\"" ~ (raw_string | escape)* ~ "\"" }

i32_ty  = { "i32" }
f32_ty  = { "f32" }
char_ty = { "char" }
str_ty  = { "str" }

ty = { i32_ty | f32_ty | char_ty | str_ty }

ident_char = _{ 'a'..'z' | 'A'..'Z' | '0'..'9' | "_" }
ident      =  {
    ('a'..'z' | 'A'..'Z') ~ ident_char* |
    "_" ~ ident_char+
}

op_unary_minus =  { "-" }
op_unary_not   =  { "!" }
op_unary       = _{
    op_unary_minus |
    op_unary_not
}

op_plus          =  { "+" }
op_minus         =  { "-" }
op_times         =  { "*" }
op_divide        =  { "/" }
op_and           =  { "&&" }
op_or            =  { "||" }
op_greater       =  { ">" }
op_greater_equal =  { ">=" }
op_lower         =  { "<" }
op_lower_equal   =  { "<=" }
op_equal         =  { "==" }
op_infix         = _{
    op_plus |
    op_minus |
    op_times |
    op_divide |
    op_and |
    op_or |
    op_greater |
    op_greater_equal |
    op_lower |
    op_lower_equal |
    op_equal
}

paren_open  = { "(" }
paren_close = { ")" }

value = {
    float |
    int |
    chr |
    string |
    ident |
    paren_open ~ expr ~ paren_close
}

dot   =  { "." }
comma =  { "," }
args  = _{ expr ~ (comma ~ expr)* }
call  =  { ident ~ paren_open ~ args? ~ paren_close }

term = { op_unary* ~ value ~ (dot ~ call)* }
expr = { term ~ (op_infix ~ term)* }
